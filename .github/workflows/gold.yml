name: Build Linux Kernel (5.10 and 6.6)

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 手动触发工作流

jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境

    steps:
    # 检出代码
    - name: Checkout repository
      uses: actions/checkout@v2

    # 设置交叉编译工具链
    - name: Set up cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses-dev \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          bc \
          git \
          wget \
          ccache \
          zlib1g-dev \
          liblz4-tool \
          libusb-1.0-0-dev \
          gcc-arm-linux-gnueabihf \
          gcc-aarch64-linux-gnu

    # 克隆内核源代码并切换版本（不使用变量）
    - name: Clone kernel source
      run: |
        # 设置内核源代码路径
        mkdir -p $GITHUB_WORKSPACE/kernel_build/kernel_src
        git clone https://github.com/liliumproject/kernel_xiaomi_gold.git $GITHUB_WORKSPACE/kernel_build/kernel_src
        cd $GITHUB_WORKSPACE/kernel_build/kernel_src

        # 选择内核版本并切换
        if [ "${{ github.event.inputs.kernel_version }}" == "5.10" ]; then
          git checkout 5.10
        elif [ "${{ github.event.inputs.kernel_version }}" == "6.6" ]; then
          git checkout 6.6
        else
          echo "Unsupported kernel version"
          exit 1
        fi

    # 安装依赖
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses-dev \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          bc \
          git \
          wget \
          ccache \
          zlib1g-dev \
          liblz4-tool \
          libusb-1.0-0-dev

    # 配置内核 (ARM64)
    - name: Configure kernel for ARM64
      run: |
        cd $GITHUB_WORKSPACE/kernel_build/kernel_src
        make ARCH=arm64 CROSS_COMPILE=/usr/bin/aarch64-linux-gnu- O=$GITHUB_WORKSPACE/kernel_build/out sukisuultra_defconfig
        echo "CONFIG_SLUB=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_SLUB_DEBUG=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_ZRAM=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_ZSWAP=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_ZSWAP_COMPRESSORS_LZ4=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_OVERCOMMIT_MEMORY=1" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_OVERCOMMIT_RATIO=80" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_NUMA=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_CGROUPS=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config
        echo "CONFIG_MEMCG=y" >> $GITHUB_WORKSPACE/kernel_build/out/.config

    # 编译内核（ARM64）
    - name: Build kernel for ARM64
      run: |
        cd $GITHUB_WORKSPACE/kernel_build/kernel_src
        make -j$(nproc) ARCH=arm64 CROSS_COMPILE=/usr/bin/aarch64-linux-gnu- O=$GITHUB_WORKSPACE/kernel_build/out
        if [ ! -f "$GITHUB_WORKSPACE/kernel_build/out/arch/arm64/boot/Image" ]; then
          echo "Kernel build failed: Image not found!"
          exit 1
        fi

    # 克隆 AnyKernel3
    - name: Clone AnyKernel3
      run: |
        git clone https://github.com/osm0sis/AnyKernel3.git $GITHUB_WORKSPACE/kernel_build/AnyKernel3
        rm -rf $GITHUB_WORKSPACE/kernel_build/AnyKernel3/*

    # 将编译好的内核镜像和设备树复制到 AnyKernel3
    - name: Copy kernel image and device tree to AnyKernel3
      run: |
        cp $GITHUB_WORKSPACE/kernel_build/out/arch/arm64/boot/Image $GITHUB_WORKSPACE/kernel_build/AnyKernel3/
        cp $GITHUB_WORKSPACE/kernel_build/out/arch/arm64/boot/dts/*.dtb $GITHUB_WORKSPACE/kernel_build/AnyKernel3/

    # 复制编译好的模块
    - name: Copy kernel modules to AnyKernel3
      run: |
        cp -r $GITHUB_WORKSPACE/kernel_build/out/lib/modules/* $GITHUB_WORKSPACE/kernel_build/AnyKernel3/modules/

    # 打包内核
    - name: Package kernel with AnyKernel3
      run: |
        cd $GITHUB_WORKSPACE/kernel_build/AnyKernel3
        ./anykernel.sh

    # 上传构建好的内核包
    - name: Upload Kernel Package
      uses: actions/upload-artifact@v4
      with:
        name: kernel-package
        path: $GITHUB_WORKSPACE/kernel_build/AnyKernel3/*.zip

    # 打印构建完成信息
    - name: Build complete
      run: echo "Kernel build completed. The package is available in the artifacts."
